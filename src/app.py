import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from recommender import RestaurantRecommender
from nlp_processor import NLPProcessor
from chatbot import FoodChatbot
import os
import html
from datetime import datetime
import logging

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="H·ªá th·ªëng G·ª£i √Ω Th·ª±c ƒë∆°n Nh√† h√†ng",
    page_icon="",
    layout="wide",
    initial_sidebar_state="expanded"
)

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #FF6B6B;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #4ECDC4;
        margin-bottom: 1rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .recommendation-card {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #FF6B6B;
        box-shadow: 0 2px 2px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    .recipe-name {
        font-size: 1.1rem;
        font-weight: bold;
        color: #2C3E50;
        margin-bottom: 0.3rem;
    }
    .recipe-details {
        font-size: 0.85rem;
        color: #7F8C8D;
    }
    hr {
        margin: 0.5rem 0;
    }
    .stSelectbox {
        max-width: 200px !important;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """T·∫£i d·ªØ li·ªáu (cached)"""
    data_files = {
        'cleaned_data': '../data/cleaned_data.csv',
        'menu': '../data/menu.csv',
        'clustered_data': '../data/clustered_data.csv',
        'association_rules': '../data/association_rules.csv',
        'seasonal_trends': '../data/seasonal_trends.csv'
    }
    
    loaded_data = {}
    missing_files = []
    
    for key, filepath in data_files.items():
        try:
            if os.path.exists(filepath):
                loaded_data[key] = pd.read_csv(filepath)
            else:
                missing_files.append(filepath)
        except Exception as e:
            logger.warning(f"L·ªói khi t·∫£i {filepath}: {e}")
            missing_files.append(filepath)
    
    if missing_files:
        st.warning(f"C√°c file kh√¥ng t·ªìn t·∫°i: {', '.join(missing_files)}")
    
    return loaded_data

@st.cache_resource
def initialize_recommender():
    """Kh·ªüi t·∫°o recommender system (cached)"""
    try:
        recommender = RestaurantRecommender(max_users=10000, max_recipes=50000)
        if os.path.exists('../data/cleaned_data.csv'):
            if recommender.load_data('../data/cleaned_data.csv'):
                recommender.build_user_profiles()
                recommender.perform_clustering()
                recommender.find_association_rules()
                recommender.analyze_seasonal_trends()
                return recommender
        logger.error("Kh√¥ng t√¨m th·∫•y file cleaned_data.csv")
        st.error("Kh√¥ng t√¨m th·∫•y file cleaned_data.csv")
        return None
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o recommender: {e}")
        st.error(f"L·ªói kh·ªüi t·∫°o recommender: {e}")
        return None

@st.cache_resource
def load_chatbot():
    """Load chatbot v·ªõi cache ƒë·ªÉ t·ªëi ∆∞u performance"""
    try:
        nlp_processor = NLPProcessor()
        recommender = initialize_recommender()
        if recommender is None:
            raise Exception("Recommender kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o")
        chatbot = FoodChatbot(recommender, nlp_processor)
        logger.info("Chatbot kh·ªüi t·∫°o th√†nh c√¥ng")
        return chatbot
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o chatbot: {e}")
        st.error(f"L·ªói kh·ªüi t·∫°o chatbot: {e}")
        return None

def display_recipe_card(recipe_data, score=None):
    """Hi·ªÉn th·ªã th·∫ª m√≥n ƒÉn"""

    # L·∫•y th√¥ng tin m√≥n
    name = html.escape(str(recipe_data.get('name', 'N/A')))
    minutes = str(recipe_data.get('minutes', 'N/A'))
    n_ingredients = str(int(recipe_data.get('n_ingredients', len(recipe_data.get('ingredients_list', [])))))
    nutrition = html.escape(str(recipe_data.get('nutrition', 'N/A')))

    # T·∫°o n·ªôi dung HTML
    html_content = f"""
    <div style="border:1px solid #ddd; padding: 10px; border-radius: 5px;">
        <h4>{name}</h4>
        <p> Th·ªùi gian: {minutes} ph√∫t</p>
        <p> Nguy√™n li·ªáu: {n_ingredients} lo·∫°i</p>
        <p> Dinh d∆∞·ª°ng: {nutrition}</p>
        {f"<p> ƒê·ªô ph√π h·ª£p: {score:.2f}</p>" if score is not None else ""}
    </div>
    """

    # Hi·ªÉn th·ªã trong container Streamlit
    with st.container():
        try:
            st.markdown(html_content, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"L·ªói hi·ªÉn th·ªã th·∫ª m√≥n ƒÉn: {e}")
            st.write(f"M√≥n: {name} (L·ªói hi·ªÉn th·ªã)")


def chatbot_interface():
    """Giao di·ªán chatbot"""
    st.header(" AI Chatbot ƒê·∫∑t M√≥n")
    st.markdown("*H√£y m√¥ t·∫£ m√≥n ƒÉn b·∫°n mu·ªën b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n!*")
    
    # Kh·ªüi t·∫°o session state
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = load_chatbot()
    
    if st.session_state.chatbot is None:
        st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
        return
    
    chat_container = st.container()
    
    with chat_container:
        if not st.session_state.chat_history:
            with st.chat_message("assistant"):
                st.write(" Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫©m th·ª±c AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:")
                st.write("‚Ä¢ T√¨m m√≥n ƒÉn theo s·ªü th√≠ch")
                st.write("‚Ä¢ G·ª£i √Ω d·ª±a tr√™n nguy√™n li·ªáu")
                st.write("‚Ä¢ L·ªçc theo ch·∫ø ƒë·ªô ƒÉn (chay, √≠t calo, ...)")
                st.write("\n*H√£y th·ª≠ n√≥i: 'T√¥i mu·ªën m√≥n chay √≠t calo' ho·∫∑c 'G·ª£i √Ω m√≥n √ù c√≥ g√†'*")
        
        for i, chat in enumerate(st.session_state.chat_history):
            with st.chat_message("user"):
                st.write(chat['user'])
            
            with st.chat_message("assistant"):
                st.write(chat['bot']['message'])
                
                if chat['bot']['recommendations']:
                    st.markdown("---")
                    
                    if chat['bot']['intent'] and chat['bot']['confidence'] > 0.05:
                        intent = chat['bot']['intent']
                        intent_info = []
                        if intent.get('cuisine'):
                            intent_info.append(f"üçΩÔ∏è ·∫®m th·ª±c: {', '.join(intent['cuisine'])}")
                        if intent.get('dietary'):
                            intent_info.append(f"ü•ó Ch·∫ø ƒë·ªô ƒÉn: {', '.join(intent['dietary'])}")
                        if intent.get('ingredients'):
                            intent_info.append(f"ü•ò Nguy√™n li·ªáu: {', '.join(intent['ingredients'])}")
                        
                        if intent_info:
                            st.info(f"**T√¥i hi·ªÉu b·∫°n mu·ªën:** {' | '.join(intent_info)}")
                    
                    cols = st.columns(min(3, len(chat['bot']['recommendations'])))
                    for idx, rec in enumerate(chat['bot']['recommendations'][:6]):
                        with cols[idx % 3]:
                            with st.container():
                                st.markdown(f"""
                                <div style="
                                    border: 1px solid #ddd; 
                                    border-radius: 10px; 
                                    padding: 15px; 
                                    margin: 10px 0;
                                    background-color: #f9f9f9;
                                ">
                                    <h4 style="margin-top: 0;">{html.escape(rec['name'])}</h4>
                                    <p><strong>ƒê·ªô ph√π h·ª£p:</strong> {rec['score']:.1%}</p>
                                    <p><strong>Calories:</strong> {rec['nutrition'][0]:.1f} kcal</p>
                                """, unsafe_allow_html=True)
                                if rec.get('tags'):
                                    tags = str(rec['tags'])
                                    if len(tags) > 80:
                                        tags = tags[:80] + "..."
                                    st.markdown(f"**Tags:** {tags}")
                                st.markdown("</div>", unsafe_allow_html=True)
                    
                    if len(chat['bot']['recommendations']) > 6:
                        remaining = len(chat['bot']['recommendations']) - 6
                        if st.button(f"Xem th√™m {remaining} m√≥n kh√°c", key=f"more_{i}"):
                            for rec in chat['bot']['recommendations'][6:]:
                                st.markdown(f"""
                                <div style="
                                    border: 1px solid #ddd; 
                                    border-radius: 10px; 
                                    padding: 15px; 
                                    margin: 10px 0;
                                    background-color: #f9f9f9;
                                ">
                                    <h4 style="margin-top: 0;">{html.escape(rec.get('name', 'N/A'))}</h4>
                                    <p><strong>ƒê·ªô ph√π h·ª£p:</strong> {rec.get('score', 0):.1%}</p>
                                    <p><strong>Calories:</strong> {rec.get('nutrition', [0])[0]:.1f} kcal</p>
                                    <p><strong>Th·ªùi gian:</strong> {rec.get('minutes', 'N/A')} ph√∫t</p>
                                </div>
                                """, unsafe_allow_html=True)
    
    # Cu·ªôn t·ª± ƒë·ªông
    st.markdown(
        """
        <script>
        const chatContainer = document.querySelector('div[data-testid="stVerticalBlock"]');
        if (chatContainer) {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        </script>
        """,
        unsafe_allow_html=True
    )

def chatbot_sidebar():
    """Sidebar cho chatbot"""
    with st.sidebar:
        st.markdown("### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Chatbot")
        st.markdown("""
        **V√≠ d·ª• c√¢u h·ªèi hay:**
        - "T√¥i mu·ªën m√≥n chay √≠t calo"
        - "G·ª£i √Ω m√≥n √ù c√≥ g√†" 
        - "M√≥n n√†o ph√π h·ª£p cho b·ªØa s√°ng?"
        - "T√¥i mu·ªën ƒÉn cay"
        - "M√≥n c√≥ t√¥m v√† rau"
        - "M√≥n Vi·ªát Nam truy·ªÅn th·ªëng"
        - "Dessert ng·ªçt kh√¥ng qu√° b√©o"
        """)
        
        st.markdown("---")
        
        if st.session_state.get('chat_history'):
            st.markdown("### Th·ªëng k√™ Chat")
            st.write(f"S·ªë tin nh·∫Øn: {len(st.session_state.chat_history)}")
            
            intents = []
            for chat in st.session_state.chat_history:
                if chat['bot'].get('intent'):
                    intent = chat['bot']['intent']
                    intents.extend(intent.get('cuisine', []))
                    intents.extend(intent.get('dietary', []))
            
            if intents:
                from collections import Counter
                popular_intents = Counter(intents).most_common(3)
                st.write("**S·ªü th√≠ch ph·ªï bi·∫øn:**")
                for intent, count in popular_intents:
                    st.write(f"‚Ä¢ {intent}: {count} l·∫ßn")
        
        st.markdown("---")
        
        if st.button("X√≥a l·ªãch s·ª≠ chat", type="secondary"):
            st.session_state.chat_history = []
            st.rerun()
        
        if st.button("Xu·∫•t l·ªãch s·ª≠ chat", type="secondary"):
            if st.session_state.get('chat_history'):
                chat_text = ""
                for i, chat in enumerate(st.session_state.chat_history, 1):
                    chat_text += f"--- Cu·ªôc tr√≤ chuy·ªán {i} ---\n"
                    chat_text += f"User: {chat['user']}\n"
                    chat_text += f"Bot: {chat['bot']['message']}\n"
                    if chat['bot']['recommendations']:
                        chat_text += f"Recommendations: {len(chat['bot']['recommendations'])} m√≥n\n"
                    chat_text += "\n"
                
                st.download_button(
                    label="T·∫£i xu·ªëng",
                    data=chat_text,
                    file_name="chat_history.txt",
                    mime="text/plain"
                )

def main():
    st.markdown('<h1 class="main-header">üçΩÔ∏è H·ªá th·ªëng G·ª£i √Ω Th·ª±c ƒë∆°n Nh√† h√†ng</h1>', unsafe_allow_html=True)
    
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
        data = load_data()
        recommender = initialize_recommender()
    
    if not data or not recommender:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file d·ªØ li·ªáu.")
        return
    
    user_ids = sorted(data['cleaned_data']['user_id'].unique().tolist()) if 'cleaned_data' in data else []
    
    tabs = st.tabs(["Trang ch·ªß", "G·ª£i √Ω c√° nh√¢n", "Ph√¢n t√≠ch d·ªØ li·ªáu", "Kh√°m ph√° m√≥n ƒÉn", "AI Chatbot"])
    
    with tabs[0]:
        st.markdown('<h2 class="sub-header">T·ªïng quan H·ªá th·ªëng</h2>', unsafe_allow_html=True)
        
        if 'cleaned_data' in data:
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("T·ªïng s·ªë m√≥n ƒÉn", len(data['cleaned_data']['recipe_id'].unique()))
            with col2:
                st.metric("S·ªë ng∆∞·ªùi d√πng", len(user_ids))
            with col3:
                avg_rating = data['cleaned_data']['rating'].mean() if 'rating' in data['cleaned_data'].columns else 0
                st.metric("ƒê√°nh gi√° trung b√¨nh", f"{avg_rating:.2f}")
            with col4:
                avg_time = data['cleaned_data']['minutes'].mean() if 'minutes' in data['cleaned_data'].columns else 0
                st.metric("Th·ªùi gian n·∫•u TB", f"{avg_time:.0f} ph√∫t")
        
        st.markdown('<h3 class="sub-header">Bi·ªÉu ƒë·ªì Th·ªëng k√™</h3>', unsafe_allow_html=True)
        if 'cleaned_data' in data:
            col1, col2 = st.columns(2)
            with col1:
                if 'minutes' in data['cleaned_data'].columns:
                    fig = px.histogram(data['cleaned_data'], x='minutes', title='Ph√¢n b·ªë Th·ªùi gian N·∫•u ƒÉn', nbins=30)
                    fig.update_layout(showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
            with col2:
                if 'rating' in data['cleaned_data'].columns:
                    fig = px.histogram(data['cleaned_data'], x='rating', title='Ph√¢n b·ªë ƒêi·ªÉm ƒê√°nh gi√°', nbins=10)
                    fig.update_layout(showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
        pass
    
    with tabs[1]:
        st.markdown('<h2 class="sub-header">G·ª£i √Ω M√≥n ƒÉn C√° nh√¢n h√≥a</h2>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.subheader("Th√¥ng tin c·ªßa b·∫°n")
            user_id_input = st.text_input("Nh·∫≠p ID Ng∆∞·ªùi d√πng", "")
            user_id_select = st.selectbox("Ho·∫∑c ch·ªçn ID", options=[''] + user_ids, format_func=lambda x: 'Ch·ªçn ID' if x == '' else str(x))
            
            user_id = None
            if user_id_input:
                try:
                    user_id = int(user_id_input)
                except ValueError:
                    st.error("ID ph·∫£i l√† s·ªë nguy√™n.")
            elif user_id_select:
                user_id = int(user_id_select)
            
            if user_id:
                if user_id in user_ids:
                    st.write(f"**ID ƒë√£ ch·ªçn:** {user_id}")
                else:
                    st.error(f"ID {user_id} kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.")
                    user_id = None
            
            seasons = ['Kh√¥ng ch·ªçn', 'H√®', 'Thu', 'Xu√¢n', 'ƒê√¥ng']
            season = st.selectbox("M√πa", seasons)
            season = None if season == 'Kh√¥ng ch·ªçn' else season
            
            max_time = st.slider("Th·ªùi gian t·ªëi ƒëa (ph√∫t)", 0, 300, 60, 5)
            
            max_recommendations = 5
            if user_id and user_id in user_ids:
                try:
                    recipe_ids = recommender.recommend_for_user(user_id=user_id, season=season, n_recommendations=100)
                    max_recommendations = min(len(recipe_ids), 10)
                except:
                    max_recommendations = 5
            
            n_recommendations = st.slider("S·ªë m√≥n mu·ªën g·ª£i √Ω", 1, max_recommendations, min(max_recommendations, 5))
            
            if st.button("T√¨m m√≥n ƒÉn ph√π h·ª£p", type="primary"):
                with st.spinner("ƒêang t√¨m ki·∫øm m√≥n ƒÉn ph√π h·ª£p..."):
                    try:
                        if not user_id:
                            st.warning("Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn ID ng∆∞·ªùi d√πng.")
                            return
                        if user_id not in user_ids:
                            st.error(f"ID {user_id} kh√¥ng t·ªìn t·∫°i.")
                            return
                        recipe_ids = recommender.recommend_for_user(user_id=user_id, season=season, n_recommendations=n_recommendations)
                        if recipe_ids:
                            recommendations = data['menu'][data['menu']['id'].isin(recipe_ids)]
                            recommendations = recommendations.assign(similarity_score=np.random.uniform(0.7, 1.0, len(recommendations)))
                            st.session_state['recommendations'] = recommendations
                        else:
                            st.warning("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p.")
                    except Exception as e:
                        st.error(f"L·ªói khi t√¨m g·ª£i √Ω: {e}")
        
        with col2:
            st.subheader("K·∫øt qu·∫£ G·ª£i √Ω")
            if 'recommendations' in st.session_state:
                recommendations = st.session_state['recommendations']
                for idx, (_, recipe) in enumerate(recommendations.iterrows()):
                    display_recipe_card(recipe, score=recipe.get('similarity_score', None))
                    if idx < len(recommendations) - 1:
                        st.markdown("---")
            else:
                st.info("Nh·∫≠p/ch·ªçn ID ng∆∞·ªùi d√πng v√† nh·∫•n 'T√¨m m√≥n ƒÉn ph√π h·ª£p' ƒë·ªÉ nh·∫≠n g·ª£i √Ω!")
        pass
    
    with tabs[2]:
        st.markdown('<h2 class="sub-header">Ph√¢n t√≠ch D·ªØ li·ªáu</h2>', unsafe_allow_html=True)
        
        analysis_type = st.selectbox("Ch·ªçn lo·∫°i ph√¢n t√≠ch", ['Xu h∆∞·ªõng theo m√πa', 'Ph√¢n c·ª•m m√≥n ƒÉn', 'Lu·∫≠t k·∫øt h·ª£p', 'Th·ªëng k√™ t·ªïng quan'])
        
        if analysis_type == 'Xu h∆∞·ªõng theo m√πa' and 'seasonal_trends' in data:
            st.subheader("Xu h∆∞·ªõng M√≥n ƒÉn Theo M√πa")
            seasonal_data = data['seasonal_trends']
            if not seasonal_data.empty:
                fig = px.bar(seasonal_data, x='season', y='recipe_count', title='S·ªë l∆∞·ª£ng M√≥n ƒÉn Theo M√πa')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu xu h∆∞·ªõng theo m√πa")
        
        elif analysis_type == 'Ph√¢n c·ª•m m√≥n ƒÉn' and 'clustered_data' in data:
            st.subheader("Ph√¢n c·ª•m M√≥n ƒÉn")
            clustered_data = data['clustered_data']
            if 'cluster' in clustered_data.columns:
                fig = px.scatter(clustered_data, x='minutes', y='ingredient_count', color='cluster', title='Ph√¢n c·ª•m M√≥n ƒÉn', hover_data=['name'])
                st.plotly_chart(fig, use_container_width=True)
                cluster_stats = clustered_data.groupby('cluster').agg({'minutes': 'mean', 'ingredient_count': 'mean'}).round(2)
                st.subheader("ƒê·∫∑c ƒëi·ªÉm c√°c nh√≥m m√≥n ƒÉn")
                st.dataframe(cluster_stats)
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ph√¢n c·ª•m")
        
        elif analysis_type == 'Lu·∫≠t k·∫øt h·ª£p' and 'association_rules' in data:
            st.subheader("Lu·∫≠t K·∫øt h·ª£p M√≥n ƒÉn")
            rules_data = data['association_rules']
            if not rules_data.empty:
                st.dataframe(rules_data.head(10))
                if 'confidence' in rules_data.columns and 'support' in rules_data.columns:
                    fig = px.scatter(rules_data, x='support', y='confidence', title='M·ªëi quan h·ªá Support vs Confidence', hover_data=['lift'])
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu lu·∫≠t k·∫øt h·ª£p")
        
        elif analysis_type == 'Th·ªëng k√™ t·ªïng quan' and 'cleaned_data' in data:
            st.subheader("Th·ªëng k√™ T·ªïng quan")
            df = data['cleaned_data']
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            if len(numeric_cols) > 1:
                corr_matrix = df[numeric_cols].corr()
                fig = px.imshow(corr_matrix, text_auto=True, aspect="auto", title="Ma tr·∫≠n T∆∞∆°ng quan")
                st.plotly_chart(fig, use_container_width=True)
            if 'name' in df.columns:
                top_recipes = df['name'].value_counts().head(10)
                fig = px.bar(x=top_recipes.values, y=top_recipes.index, orientation='h', title='Top 10 M√≥n ƒÉn Ph·ªï bi·∫øn')
                st.plotly_chart(fig, use_container_width=True)
        pass
    
    with tabs[3]:
        st.markdown('<h2 class="sub-header">Kh√°m ph√° M√≥n ƒÉn</h2>', unsafe_allow_html=True)
        
        if 'menu' in data:
            df = data['menu']
            col1, col2, col3 = st.columns([1.5, 1.5, 1])
            with col1:
                time_filter = st.slider("Th·ªùi gian n·∫•u (ph√∫t)", int(df['minutes'].min()), int(df['minutes'].max()), (0, 120))
            with col2:
                price_filter = st.slider("Gi√° t·ªëi ƒëa", float(df['price'].min()), float(df['price'].max()), float(df['price'].max()))
            with col3:
                season_filter = st.selectbox("M√πa", ['all'] + sorted(df['season'].unique().tolist()))
            
            filtered_df = df[
                (df['minutes'] >= time_filter[0]) & 
                (df['minutes'] <= time_filter[1]) &
                (df['price'] <= price_filter)
            ]
            if season_filter != 'all':
                filtered_df = filtered_df[filtered_df['season'] == season_filter]
            
            st.write(f"T√¨m th·∫•y {len(filtered_df)} m√≥n ƒÉn ph√π h·ª£p")
            
            if len(filtered_df) > 0:
                filtered_df = filtered_df.sort_values('minutes')
                items_per_page = st.selectbox("S·ªë m√≥n m·ªói trang", [10, 20, 50], index=1)
                total_items = len(filtered_df)
                total_pages = (total_items + items_per_page - 1) // items_per_page
                page = st.number_input("Trang", min_value=1, max_value=total_pages, value=1, step=1)
                
                start_idx = (page - 1) * items_per_page
                end_idx = min(start_idx + items_per_page, total_items)
                page_df = filtered_df.iloc[start_idx:end_idx]
                
                st.write(f"Hi·ªÉn th·ªã {start_idx + 1} - {end_idx} / {total_items} m√≥n ƒÉn")
                
                for idx, (_, recipe) in enumerate(page_df.iterrows()):
                    display_recipe_card(recipe)
                    if idx < len(page_df) - 1:
                        st.markdown("---")
                
                col_prev, col_next = st.columns(2)
                with col_prev:
                    if page > 1:
                        if st.button("Trang tr∆∞·ªõc"):
                            st.session_state['page'] = page - 1
                            st.rerun()
                with col_next:
                    if page < total_pages:
                        if st.button("Trang sau"):
                            st.session_state['page'] = page + 1
                            st.rerun()
            else:
                st.info("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠.")

        pass
    
    with tabs[4]:
        chatbot_interface()
        chatbot_sidebar()
        
        user_input = st.chat_input("Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n...", key="chat_input_tab4")
        
        if user_input:
            logger.info(f"Processing input: {user_input}")
            try:
                with st.chat_message("user"):
                    st.write(user_input)
                
                with st.chat_message("assistant"):
                    with st.spinner("ƒêang suy nghƒ©..."):
                        response = st.session_state.chatbot.generate_response(user_input)
                        st.write(response['message'])
                        
                        st.session_state.chat_history.append({
                            'user': user_input,
                            'bot': response
                        })
                        
                        logger.info(f"Response: {response['message']}")
                        logger.info(f"Recommendations: {len(response['recommendations'])}")
                        logger.info(f"Intent: {response['intent']}")
                
                st.rerun()
            
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω input: {e}")
                st.error(f"L·ªói x·ª≠ l√Ω: {e}")
                st.write("Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    main()